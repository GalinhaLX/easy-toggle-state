/*! easy-toggle-state v1.13.0 | (c) 2020 Matthieu Bu√© <https://twikito.com> | MIT License | https://twikito.github.io/easy-toggle-state/ */
!function(){"use strict";const t=document.documentElement.getAttribute("data-easy-toggle-state-custom-prefix")||"toggle",e=(e,r=(()=>t)())=>["data",r,e].filter(Boolean).join("-"),r=e("arrows"),i="aria-checked",n=e("class"),o=e("class-on-target"),s=e("class-on-trigger"),a="is-active",c=e("escape"),u=e("event"),g="aria-expanded",l=e("group"),h="aria-hidden",d=e("is-active"),A=e("modal"),b=e("outside"),f=e("outside-event"),v="aria-pressed",E=e("radio-group"),$="aria-selected",m=e("target"),T=e("target-all"),w=e("target-next"),p=e("target-parent"),y=e("target-previous"),S=e("target-self"),k=e("state"),L=e("trigger-off"),x=new Event("toggleAfter"),D=new Event("toggleBefore"),O=(t,e)=>{const r=t?`[${t}]`:"";if(e)return[...e.querySelectorAll(r)];const i=[`[${n}]${r}`,`[${s}]${r}`,`[${o}][${m}]${r}`,`[${o}][${T}]${r}`,`[${o}][${w}]${r}`,`[${o}][${y}]${r}`,`[${o}][${p}]${r}`,`[${o}][${S}]${r}`].join().trim();return[...document.querySelectorAll(i)]},I=(t,e)=>t.dispatchEvent(e),q=(t,e={[i]:t.isToggleActive,[g]:t.isToggleActive,[h]:!t.isToggleActive,[v]:t.isToggleActive,[$]:t.isToggleActive})=>Object.keys(e).forEach(r=>t.hasAttribute(r)&&t.setAttribute(r,e[r])),B=(t,e,r=!1)=>`This trigger has the class name '${t}' filled in both attributes '${n}' and '${e}'. As a result, this class will be toggled ${r&&"on its target(s)"} twice at the same time.`,C=(t,e)=>(t.getAttribute(e)||"").split(" ").filter(Boolean),j=t=>{if(t.hasAttribute(n)&&t.getAttribute(n)&&(t.hasAttribute(s)||t.hasAttribute(o))){const e=C(t,s),r=C(t,o);C(t,n).forEach(i=>{e.includes(i)&&console.warn(B(i,s),t),r.includes(i)&&console.warn(B(i,o,!0),t)})}const e=[n,s,o].reduce((e,r)=>{const i=C(t,r);return(r===n||r===s)&&e.trigger.push(...i),(r===n||r===o)&&e.target.push(...i),e},{trigger:[],target:[]});return!e.trigger.length&&e.trigger.push(a),!e.target.length&&e.target.push(a),e},Y=t=>{const e=t.hasAttribute(l)?l:E;return O(`${e}="${t.getAttribute(e)}"`).filter(t=>t.isToggleActive)},F=(t,e)=>{t||console.warn(`You should fill the attribute '${e}' with a selector`)},H=(t,e)=>{if(0===e.length)return console.warn(`There's no match with the selector '${t}' for this trigger`),[];const r=t.match(/#\w+/gi);return r&&r.forEach(t=>{const r=[...e].filter(e=>e.id===t.slice(1));r.length>1&&console.warn(`There's ${r.length} matches with the selector '${t}' for this trigger`)}),[...e]},K=(t,e)=>e.forEach(e=>{t.classList.toggle(e)}),M=t=>document.addEventListener(t.getAttribute(f)||t.getAttribute(u)||"click",R,!1),R=t=>{const e=t.target,r=t.type;let i=!1;O(b).filter(t=>t.getAttribute(f)===r||t.getAttribute(u)===r&&!t.hasAttribute(f)||"click"===r&&!t.hasAttribute(u)&&!t.hasAttribute(f)).forEach(t=>{const r=e.closest("["+k+'="true"]');r&&r.easyToggleStateTrigger===t&&(i=!0),!i&&t!==e&&t.isToggleActive&&(t.hasAttribute(l)||t.hasAttribute(E)?Q:N)(t)}),i||document.removeEventListener(r,R,!1),e.hasAttribute(b)&&e.isToggleActive&&M(e)},U=t=>N(t.currentTarget.targetElement),z=t=>{if(t.hasAttribute(b))return t.hasAttribute(E)?console.warn(`You can't use '${b}' on a radio grouped trigger`):t.isToggleActive?M(t):void 0},G=t=>{const e=[...document.ETSFocusTrapContainer.querySelectorAll("a[href], area[href], input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]")];if(!e.length||"Tab"!==t.key)return;const r=t.target,i=e[0],n=e[e.length-1];return-1===e.indexOf(r)?(t.preventDefault(),i.focus()):t.shiftKey&&r===i?(t.preventDefault(),n.focus()):t.shiftKey||r!==n?void 0:(t.preventDefault(),i.focus())},J=(t,e,r)=>(t=>{if(t.hasAttribute(m)||t.hasAttribute(T)){const e=t.getAttribute(m)||t.getAttribute(T);return F(e,t.hasAttribute(m)?m:T),H(e,document.querySelectorAll(e))}if(t.hasAttribute(p)){const e=t.getAttribute(p);return F(e,p),H(e,t.parentElement.querySelectorAll(e))}if(t.hasAttribute(S)){const e=t.getAttribute(S);return F(e,S),H(e,t.querySelectorAll(e))}return t.hasAttribute(y)?H("previous",[t.previousElementSibling].filter(Boolean)):t.hasAttribute(w)?H("next",[t.nextElementSibling].filter(Boolean)):[]})(t).forEach(i=>{I(i,D),i.isToggleActive=!i.isToggleActive,q(i),r?i.classList.add(...e):K(i,e),t.hasAttribute(b)&&(i.setAttribute(k,t.isToggleActive),i.easyToggleStateTrigger=t),t.hasAttribute(A)&&(i.isToggleActive?(document.ETSFocusTrapContainer=i,document.addEventListener("keydown",G,!1)):(document.ETSFocusTrapContainer=null,document.removeEventListener("keydown",G,!1))),I(i,x),((t,e)=>{const r=O(L,t);if(0!==r.length)e.isToggleActive?r.forEach(t=>{t.targetElement=e,t.addEventListener("click",U,!1)}):(r.forEach(t=>{t.removeEventListener("click",U,!1)}),e.focus())})(i,t)}),N=t=>{I(t,D);const e=j(t);return K(t,e.trigger),t.isToggleActive=!t.isToggleActive,q(t),I(t,x),J(t,e.target,!1),z(t)},P=t=>{I(t,D);const e=j(t);return t.classList.add(...e.trigger),t.isToggleActive=!0,q(t,{[i]:!0,[g]:!0,[h]:!1,[v]:!0,[$]:!0}),I(t,x),J(t,e.target,!0),z(t)},Q=t=>{const e=Y(t);return 0===e.length?N(t):-1===e.indexOf(t)?(e.forEach(N),N(t)):-1===e.indexOf(t)||t.hasAttribute(E)?void 0:N(t)},V=()=>{[...document.querySelectorAll(`[${o}]:not([${m}]):not([${T}]):not([${w}]):not([${y}]):not([${p}]):not([${S}])`)].forEach(t=>{console.warn(`This trigger has the attribute '${o}', but no specified target\n`,t)}),O(d).filter(t=>!t.isETSDefInit).forEach(t=>t.hasAttribute(l)||t.hasAttribute(E)?Y(t).length>0?console.warn(`Toggle group '${t.getAttribute(l)||t.getAttribute(E)}' must not have more than one trigger with '${d}'`):(P(t),void(t.isETSDefInit=!0)):P(t));const t=O().filter(t=>!t.isETSInit);return t.forEach(t=>{t.addEventListener(t.getAttribute(u)||"click",e=>{e.preventDefault(),(t.hasAttribute(l)||t.hasAttribute(E)?Q:N)(t)},!1),t.isETSInit=!0}),O(c).length>0&&!document.isETSEscInit&&(document.addEventListener("keydown",t=>{"Escape"!==t.key&&"Esc"!==t.key||O(c).forEach(t=>{if(t.isToggleActive)return t.hasAttribute(E)?console.warn(`You can't use '${c}' on a radio grouped trigger`):(t.hasAttribute(l)?Q:N)(t)})},!1),document.isETSEscInit=!0),O(r).length>0&&!document.isETSArrInit&&(document.addEventListener("keydown",t=>{const e=document.activeElement;if(-1===["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Home","End"].indexOf(t.key)||!e.hasAttribute(n)&&!e.hasAttribute(s)&&!e.hasAttribute(o)||!e.hasAttribute(r))return;if(!e.hasAttribute(l)&&!e.hasAttribute(E))return console.warn(`You can't use '${r}' on a trigger without '${l}' or '${E}'`);t.preventDefault();const i=e.hasAttribute(l)?O(`${l}='${e.getAttribute(l)}'`):O(`${E}='${e.getAttribute(E)}'`);let a=e;switch(t.key){case"ArrowUp":case"ArrowLeft":a=i.indexOf(e)>0?i[i.indexOf(e)-1]:i[i.length-1];break;case"ArrowDown":case"ArrowRight":a=i.indexOf(e)<i.length-1?i[i.indexOf(e)+1]:i[0];break;case"Home":a=i[0];break;case"End":a=i[i.length-1]}return a.focus(),a.dispatchEvent(new Event(a.getAttribute(u)||"click"))},!1),document.isETSArrInit=!0),t},W=()=>{V(),document.removeEventListener("DOMContentLoaded",W)};document.addEventListener("DOMContentLoaded",W),window.initEasyToggleState=V}();
